helpers.py:        dir_name = os.fspath(dir_name)
fake_pathlib.py:New in pyfakefs 3.0.
fake_pathlib.py:from pyfakefs import fake_scandir
fake_pathlib.py:from pyfakefs.extra_packages import use_scandir, pathlib, pathlib2
fake_pathlib.py:from pyfakefs.fake_filesystem import FakeFileOpen, FakeFilesystem
fake_pathlib.py:        lambda fs, path: FakeFilesystem.stat(fs, path, follow_symlinks=False))
fake_pathlib.py:        lchmod = _wrap_strfunc(lambda fs, path, mode: FakeFilesystem.chmod(
fake_pathlib.py:            fs, path, mode, follow_symlinks=False))
fake_pathlib.py:        lambda fs, old_path, new_path: FakeFilesystem.rename(
fake_pathlib.py:            fs, old_path, new_path, force_replace=True))
fake_pathlib.py:        lambda fs, file_path, link_target, target_is_directory:
fake_pathlib.py:        FakeFilesystem.create_symlink(fs, file_path, link_target,
fake_pathlib.py:            lambda fs, file_path, link_target:
fake_pathlib.py:            FakeFilesystem.link(fs, file_path, link_target))
fake_pathlib.py:        self.has_drv = filesystem.is_windows_fs
fake_pathlib.py:        if self.filesystem.is_windows_fs:
fake_pathlib.py:        if self.filesystem.is_windows_fs:
fake_pathlib.py:        if self.filesystem.is_windows_fs:
fake_pathlib.py:        if self.filesystem.is_windows_fs:
fake_pathlib.py:        if self.filesystem.is_windows_fs and parts[0].startswith('\\\\'):
fake_pathlib.py:    New in pyfakefs 3.0.
fake_pathlib.py:                   if cls.filesystem.is_windows_fs
fake_pathlib.py:        if cls.filesystem.is_windows_fs != (os.name == 'nt'):
fake_pathlib.py:            if cls.filesystem.is_windows_fs:
fake_filesystem_shutil.py:  `fake_filesystem_unittest.TestCase`, pytest fs fixture,
deprecator.py:    >>> from pyfakefs.deprecator import Deprecator
mox3_stubout.py:Previously, pyfakefs used just this file from the mox3 library.
mox3_stubout.py:be used because of the problem described in pyfakefs #182 and
mox3_stubout.py:into pyfakefs.
patched_packages.py:with pyfakefs.
pytest_plugin.py:"""A pytest plugin for using pyfakefs as a fixture
pytest_plugin.py:When pyfakefs is installed, the "fs" fixture becomes available.
pytest_plugin.py:def my_fakefs_test(fs):
pytest_plugin.py:    fs.create_file('/var/data/xx1.txt')
pytest_plugin.py:from pyfakefs.fake_filesystem_unittest import Patcher
pytest_plugin.py:def fs(request):
pytest_plugin.py:    yield patcher.fs
fake_filesystem_unittest.py:for unit tests using the :py:class:`pyfakefs` module.
fake_filesystem_unittest.py:The `setUpPyfakefs()` method binds these modules to the corresponding fake
fake_filesystem_unittest.py:modules from `pyfakefs`.  Further, the `open()` built-in is bound to a fake
fake_filesystem_unittest.py:It is expected that `setUpPyfakefs()` be invoked at the beginning of the
fake_filesystem_unittest.py:pyfakefs by simply changing their base class from `:py:class`unittest.TestCase`
fake_filesystem_unittest.py:to `:py:class`pyfakefs.fake_filesystem_unittest.TestCase`.
fake_filesystem_unittest.py:from pyfakefs.deprecator import Deprecator
fake_filesystem_unittest.py:from pyfakefs.fake_filesystem import set_uid, set_gid, reset_ids, PatchMode
fake_filesystem_unittest.py:from pyfakefs.helpers import IS_PYPY
fake_filesystem_unittest.py:from pyfakefs.patched_packages import (
fake_filesystem_unittest.py:from pyfakefs import fake_filesystem
fake_filesystem_unittest.py:from pyfakefs import fake_filesystem_shutil
fake_filesystem_unittest.py:from pyfakefs import fake_pathlib
fake_filesystem_unittest.py:from pyfakefs import mox3_stubout
fake_filesystem_unittest.py:from pyfakefs.extra_packages import pathlib, pathlib2, use_scandir
fake_filesystem_unittest.py:    from pyfakefs import fake_scandir
fake_filesystem_unittest.py:def patchfs(_func=None, *,
fake_filesystem_unittest.py:        @patchfs
fake_filesystem_unittest.py:        def test_my_function(fake_fs):
fake_filesystem_unittest.py:            fake_fs.create_file('foo')
fake_filesystem_unittest.py:        @patchfs(allow_root_user=False)
fake_filesystem_unittest.py:        def test_with_patcher_args(fs):
fake_filesystem_unittest.py:    def wrap_patchfs(f):
fake_filesystem_unittest.py:                args.append(p.fs)
fake_filesystem_unittest.py:                "Did you mean `@patchfs(additional_skip_names=...)`?"
fake_filesystem_unittest.py:        return wrap_patchfs(_func)
fake_filesystem_unittest.py:    return wrap_patchfs
fake_filesystem_unittest.py:    File `example_test.py` in the pyfakefs release provides a usage example.
fake_filesystem_unittest.py:            of modules not provided by `pyfakefs`.
fake_filesystem_unittest.py:    def fs(self):
fake_filesystem_unittest.py:        return self._stubber.fs
fake_filesystem_unittest.py:    def setUpPyfakefs(self,
fake_filesystem_unittest.py:        """Bind the file-related modules to the :py:class:`pyfakefs` fake file
fake_filesystem_unittest.py:        return self._stubber.fs.add_real_file(real_file_path, read_only=False)
fake_filesystem_unittest.py:    def tearDownPyfakefs(self):
fake_filesystem_unittest.py:    the :py:mod:`pyfakefs` fake modules.
fake_filesystem_unittest.py:                patching of modules not provided by `pyfakefs`.
fake_filesystem_unittest.py:                used packages are applied which make them usable with pyfakefs.
fake_filesystem_unittest.py:        self.fs = None
fake_filesystem_unittest.py:    def _is_fs_module(self, mod, name, module_names):
fake_filesystem_unittest.py:    def _is_fs_function(self, fct):
fake_filesystem_unittest.py:                    if self._is_fs_function(d):
fake_filesystem_unittest.py:                            if self._is_fs_function(d):
fake_filesystem_unittest.py:                       if self._is_fs_module(mod, name, module_names)}
fake_filesystem_unittest.py:                         if self._is_fs_function(fct)}
fake_filesystem_unittest.py:        self.fs = fake_filesystem.FakeFilesystem(patcher=self)
fake_filesystem_unittest.py:        self.fs.patch_open_code = self.patch_open_code
fake_filesystem_unittest.py:            self.fake_modules[name] = self._fake_module_classes[name](self.fs)
fake_filesystem_unittest.py:        """Bind the file-related modules to the :py:mod:`pyfakefs` fake
fake_filesystem_unittest.py:        self.fs.create_dir(temp_dir)
fake_filesystem_unittest.py:                globs[name] = self._fake_module_classes[name](self.fs)
fake_filesystem_unittest.py:                or the pyfakefs test case.
fake_filesystem_unittest.py:            self._fs = caller.fs
fake_filesystem_unittest.py:            self._fs = caller
fake_filesystem_unittest.py:        self._fs.pause()
fake_filesystem_unittest.py:        return self._fs
fake_filesystem_unittest.py:        return self._fs.resume()
fake_filesystem_unittest.py:    fake implementation if they are loaded after calling `setUpPyfakefs()`.
pytest_tests/pytest_check_failed_plugin_test.py:    assert 'def test_fs(fs):' in contents
pytest_tests/pytest_fixture_test.py:import pyfakefs.pytest_tests.example as example
pytest_tests/pytest_fixture_test.py:from pyfakefs.fake_filesystem_unittest import Patcher
pytest_tests/pytest_fixture_test.py:def test_example_file_failing(fs):
pytest_tests/pytest_fixture_test.py:    fs.create_file(example.EXAMPLE_FILE, contents='stuff here')
pytest_tests/pytest_fixture_test.py:    check_that_example_file_is_in_fake_fs()
pytest_tests/pytest_fixture_test.py:def test_example_file_passing_using_fixture(fs_reload_example):
pytest_tests/pytest_fixture_test.py:    fs_reload_example.create_file(example.EXAMPLE_FILE, contents='stuff here')
pytest_tests/pytest_fixture_test.py:    check_that_example_file_is_in_fake_fs()
pytest_tests/pytest_fixture_test.py:        patcher.fs.create_file(example.EXAMPLE_FILE, contents='stuff here')
pytest_tests/pytest_fixture_test.py:        check_that_example_file_is_in_fake_fs()
pytest_tests/pytest_fixture_test.py:def check_that_example_file_is_in_fake_fs():
pytest_tests/pytest_doctest_test.py:This is a test case for pyfakefs issue #45.
pytest_tests/pytest_doctest_test.py:        command="getfixture('fs')" if fake else "pass",
pytest_tests/pytest_plugin_failing_helper.py:def test_fs(fs):
pytest_tests/pytest_fixture_param_test.py:import pyfakefs.pytest_tests.example as example
pytest_tests/pytest_fixture_param_test.py:def test_example_file_failing(fs):
pytest_tests/pytest_fixture_param_test.py:    fs.create_file(example.EXAMPLE_FILE, contents='stuff here')
pytest_tests/pytest_fixture_param_test.py:    check_that_example_file_is_in_fake_fs()
pytest_tests/pytest_fixture_param_test.py:@pytest.mark.parametrize('fs', [[None, [example]]], indirect=True)
pytest_tests/pytest_fixture_param_test.py:def test_example_file_passing_using_parametrized_fixture(fs):
pytest_tests/pytest_fixture_param_test.py:    fs.create_file(example.EXAMPLE_FILE, contents='stuff here')
pytest_tests/pytest_fixture_param_test.py:    check_that_example_file_is_in_fake_fs()
pytest_tests/pytest_fixture_param_test.py:def check_that_example_file_is_in_fake_fs():
pytest_tests/pytest_fixture_param_test.py:def test_twice_chdir(fs):
pytest_tests/pytest_fixture_param_test.py:    fs.create_dir("/absolute/path/to/directory")
pytest_tests/conftest.py:from pyfakefs.fake_filesystem_unittest import Patcher
pytest_tests/conftest.py:# import the fs fixture to be visible if pyfakefs is not installed
pytest_tests/conftest.py:from pyfakefs.pytest_plugin import fs  # noqa: F401
pytest_tests/conftest.py:from pyfakefs.pytest_tests import example  # noqa: E402
pytest_tests/conftest.py:def fs_reload_example():
pytest_tests/conftest.py:    yield patcher.fs
pytest_tests/pytest_plugin_test.py:"""Tests that the pytest plugin properly provides the "fs" fixture"""
pytest_tests/pytest_plugin_test.py:from pyfakefs.fake_filesystem_unittest import Pause
pytest_tests/pytest_plugin_test.py:def test_fs_fixture(fs):
pytest_tests/pytest_plugin_test.py:    fs.create_file('/var/data/xx1.txt')
pytest_tests/pytest_plugin_test.py:def test_pause_resume(fs):
pytest_tests/pytest_plugin_test.py:    assert fs.exists(fake_temp_file.name)
pytest_tests/pytest_plugin_test.py:    fs.pause()
pytest_tests/pytest_plugin_test.py:    assert fs.exists(fake_temp_file.name)
pytest_tests/pytest_plugin_test.py:    assert not fs.exists(real_temp_file.name)
pytest_tests/pytest_plugin_test.py:    fs.resume()
pytest_tests/pytest_plugin_test.py:def test_pause_resume_contextmanager(fs):
pytest_tests/pytest_plugin_test.py:    assert fs.exists(fake_temp_file.name)
pytest_tests/pytest_plugin_test.py:    with Pause(fs):
pytest_tests/pytest_plugin_test.py:        assert fs.exists(fake_temp_file.name)
pytest_tests/pytest_plugin_test.py:        assert not fs.exists(real_temp_file.name)
fake_filesystem.py:>>> from pyfakefs import fake_filesystem
fake_filesystem.py:from pyfakefs.deprecator import Deprecator
fake_filesystem.py:from pyfakefs.extra_packages import use_scandir
fake_filesystem.py:from pyfakefs.fake_scandir import scandir, walk
fake_filesystem.py:from pyfakefs.helpers import (
fake_filesystem.py:from pyfakefs import __version__  # noqa: F401 for upwards compatibility
fake_filesystem.py:        ext4 and NTFS). This is currently ignored by pyfakefs, which uses
fake_filesystem.py:        default. pyfakefs never updates `st_atime` under Windows, assuming
fake_filesystem.py:            filesystem.is_windows_fs, USER_ID, GROUP_ID, time.time())
fake_filesystem.py:        devnull = 'nul' if filesystem.is_windows_fs else '/dev/null'
fake_filesystem.py:                not self.filesystem.is_windows_fs):
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        is_windows_fs: `True` in a real or faked Windows file system.
fake_filesystem.py:            to the patcher object if using the pytest fs fixture.
fake_filesystem.py:        # is_windows_fs can be used to test the behavior of pyfakefs under
fake_filesystem.py:        # Windows fs on non-Windows systems and vice verse;
fake_filesystem.py:        self.is_windows_fs = sys.platform == 'win32'
fake_filesystem.py:        # is_case_sensitive can be used to test pyfakefs for case-sensitive
fake_filesystem.py:        self.is_case_sensitive = not (self.is_windows_fs or self.is_macos)
fake_filesystem.py:        return not self.is_windows_fs and not self.is_macos
fake_filesystem.py:        return (OSType.WINDOWS if self.is_windows_fs else
fake_filesystem.py:        self.is_windows_fs = value == OSType.WINDOWS
fake_filesystem.py:        from pyfakefs import fake_pathlib
fake_filesystem.py:        Patcher object. This is also the case for the pytest `fs` fixture.
fake_filesystem.py:        return '\r\n' if self.is_windows_fs else '\n'
fake_filesystem.py:                self.is_windows_fs):
fake_filesystem.py:        if (self.is_windows_fs and
fake_filesystem.py:                    if self.is_windows_fs:
fake_filesystem.py:                if not follow_symlinks or self.is_windows_fs or self.is_macos:
fake_filesystem.py:            if self.is_windows_fs:
fake_filesystem.py:                error_nr = (errno.EINVAL if self.is_windows_fs
fake_filesystem.py:        if self.is_windows_fs:
fake_filesystem.py:        if self.is_windows_fs:
fake_filesystem.py:            paths = [os.fspath(path) for path in paths]
fake_filesystem.py:        if self.is_windows_fs:
fake_filesystem.py:            if self.is_windows_fs:
fake_filesystem.py:            return not self.is_windows_fs or sys.version_info >= (3, 8)
fake_filesystem.py:        if self.is_windows_fs:
fake_filesystem.py:        if self.is_windows_fs and link_path.startswith('\\\\?\\'):
fake_filesystem.py:                    if not self.is_windows_fs:
fake_filesystem.py:                if not self.is_windows_fs and isinstance(parent_obj, FakeFile):
fake_filesystem.py:                error = errno.ENOENT if self.is_windows_fs else errno.ENOTDIR
fake_filesystem.py:        if not self.is_windows_fs:
fake_filesystem.py:                errno.EACCES if self.is_windows_fs else errno.ENOTDIR,
fake_filesystem.py:                         errno.EINVAL if self.is_windows_fs else errno.ENOTDIR)
fake_filesystem.py:                old_file_path == new_file_path and not self.is_windows_fs):
fake_filesystem.py:                error = errno.EINVAL if self.is_windows_fs else errno.ENOTDIR
fake_filesystem.py:            error = errno.EEXIST if self.is_windows_fs else errno.ENOTDIR
fake_filesystem.py:        elif self.is_windows_fs and not force_replace:
fake_filesystem.py:        if self.is_windows_fs:
fake_filesystem.py:            that `pyfakefs` must not modify the real file system.
fake_filesystem.py:                                                read_from_real_fs=True)
fake_filesystem.py:                               read_from_real_fs=False, raw_io=False,
fake_filesystem.py:            read_from_real_fs: if True, the contents are read from the real
fake_filesystem.py:        if read_from_real_fs:
fake_filesystem.py:        if (not read_from_real_fs and
fake_filesystem.py:                if not self.is_windows_fs:
fake_filesystem.py:                if self.is_windows_fs:
fake_filesystem.py:            error = errno.EINVAL if self.is_windows_fs else errno.ENOTDIR
fake_filesystem.py:        if not self.is_windows_fs and self.ends_with_path_separator(new_path):
fake_filesystem.py:                errno.EACCES if self.is_windows_fs else errno.EPERM, old_path)
fake_filesystem.py:            if not self.is_windows_fs and self.exists(path):
fake_filesystem.py:                if self.is_windows_fs:
fake_filesystem.py:        if self.is_windows_fs:
fake_filesystem.py:            if parent_dir.endswith(ellipsis) and not self.is_windows_fs:
fake_filesystem.py:            if self.is_windows_fs and dir_name == self.path_separator:
fake_filesystem.py:                if self.is_windows_fs and e.errno == errno.ENOTDIR:
fake_filesystem.py:                    if self.is_windows_fs:
fake_filesystem.py:                    if self.is_windows_fs:
fake_filesystem.py:            error_nr = errno.EACCES if self.is_windows_fs else errno.EINVAL
fake_filesystem.py:            if not self.is_windows_fs and self.islink(target_directory):
fake_filesystem.py:        cls.devnull = 'nul' if filesystem.is_windows_fs else '/dev/null'
fake_filesystem.py:        cls.pathsep = ';' if filesystem.is_windows_fs else ':'
fake_filesystem.py:            error_nr = (errno.EINVAL if self.filesystem.is_windows_fs
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        elif (self.filesystem.is_windows_fs and
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:            'access', 'chdir', 'chmod', 'chown', 'close', 'fstat', 'fsync',
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:            if self.filesystem.is_windows_fs:
fake_filesystem.py:        if (not self.filesystem.is_windows_fs and
fake_filesystem.py:    def fstat(self, fd):
fake_filesystem.py:        if effective_ids and self.filesystem.is_windows_fs:
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:    def fsync(self, fd):
fake_filesystem.py:        """Perform fsync for a fake file (in other words, do nothing).
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        if self.filesystem.is_windows_fs or self.filesystem.is_macos:
fake_filesystem.py:    def sendfile(self, fd_out, fd_in, offset, count):
fake_filesystem.py:        fd_out starting at offset.
fake_filesystem.py:            offset: The offset in bytes where to start the copy in the
fake_filesystem.py:            TypeError: If `offset` is None under MacOs.
fake_filesystem.py:        if self.filesystem.is_windows_fs:
fake_filesystem.py:        if offset is None:
fake_filesystem.py:                raise TypeError('None is not a valid offset')
fake_filesystem.py:            source.seek(offset)
fake_filesystem.py:            # don't patch these, as the files are probably in the real fs
fake_filesystem.py:            if self._filesystem.is_windows_fs and self._changed:
fake_filesystem.py:                if self._filesystem.is_windows_fs:
fake_filesystem.py:    def seek(self, offset, whence=0):
fake_filesystem.py:            self._io.seek(offset, whence)
fake_filesystem.py:            self._read_seek = offset
fake_filesystem.py:            if not self._filesystem.is_windows_fs:
fake_filesystem.py:                if self._filesystem.is_windows_fs and self.raw_io:
fake_filesystem.py:                if (self._filesystem.is_windows_fs and args
fake_filesystem.py:                 not self.filesystem.is_windows_fs)):
fake_filesystem.py:            if self.filesystem.is_windows_fs:
fake_filesystem.py:            if not self.filesystem.is_windows_fs:
fake_filesystem.py:                error = (errno.EINVAL if self.filesystem.is_windows_fs
fake_filesystem.py:    import pyfakefs
fake_filesystem.py:    return doctest.testmod(pyfakefs.fake_filesystem)
tests/example.py:Example module that is tested in :py:class`pyfakefs.example_test.TestExample`.
tests/example.py::py:class`pyfakefs.fake_filesystem_unittest.TestCase` base class.
tests/example.py:<pyfakefs.fake_filesystem.FakeOsModule object...>
tests/example.py:<pyfakefs.fake_filesystem.FakePathModule object...>
tests/example.py:<pyfakefs.fake_filesystem_shutil.FakeShutilModule object...>
tests/fake_filesystem_glob_test.py:from pyfakefs import fake_filesystem_unittest
tests/fake_filesystem_glob_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_glob_test.py:        self.fs.create_dir(directory)
tests/fake_filesystem_glob_test.py:        self.fs.create_dir('%s/subdir' % directory)
tests/fake_filesystem_glob_test.py:        self.fs.create_dir('%s/subdir2' % directory)
tests/fake_filesystem_glob_test.py:        self.fs.create_file('%s/subfile' % directory)
tests/fake_filesystem_glob_test.py:        self.fs.create_file('[Temp]')
tests/patched_packages_test.py:with pyfakefs.
tests/patched_packages_test.py:from pyfakefs import fake_filesystem_unittest
tests/patched_packages_test.py:        self.setUpPyfakefs()
tests/patched_packages_test.py:            self.fs.create_file(path, contents='1,2,3,4')
tests/patched_packages_test.py:            self.fs.create_file(path, contents='1|2|3|4')
tests/patched_packages_test.py:            # the real fs is not used
tests/patched_packages_test.py:            self.fs.add_real_file(src_path, target_path=path)
tests/patched_packages_test.py:            self.fs.create_dir('/foo')
tests/import_as_example.py:    """Returns True in real fs only"""
tests/import_as_example.py:    """Works only in real fs"""
tests/import_as_example.py:    """Works only in real fs"""
tests/fake_filesystem_shutil_test.py:from pyfakefs import fake_filesystem_unittest
tests/fake_filesystem_shutil_test.py:from pyfakefs.fake_filesystem import is_root
tests/fake_filesystem_shutil_test.py:from pyfakefs.tests.test_utils import RealFsTestMixin
tests/fake_filesystem_shutil_test.py:        if not self.use_real_fs():
tests/fake_filesystem_shutil_test.py:            self.setUpPyfakefs()
tests/fake_filesystem_shutil_test.py:            self.filesystem = self.fs
tests/fake_filesystem_shutil_test.py:            self.fs.set_disk_usage(1000, self.base_path)
tests/fake_filesystem_shutil_test.py:    def is_windows_fs(self):
tests/fake_filesystem_shutil_test.py:        if self.use_real_fs():
tests/fake_filesystem_shutil_test.py:        return self.filesystem.is_windows_fs
tests/fake_filesystem_shutil_test.py:        self.skip_real_fs()
tests/fake_filesystem_shutil_test.py:        src_object = self.fs.create_file(src_file)
tests/fake_filesystem_shutil_test.py:        dst_object = self.fs.get_object(dst_file)
tests/fake_filesystem_shutil_test.py:        self.skip_real_fs()
tests/fake_filesystem_shutil_test.py:        src_object = self.fs.create_file(src_file)
tests/fake_filesystem_shutil_test.py:        dst_object = self.fs.get_object(dst_file)
tests/fake_filesystem_shutil_test.py:        self.skip_real_fs()
tests/fake_filesystem_shutil_test.py:        self.fs.create_file(file_path, st_size=400)
tests/fake_filesystem_shutil_test.py:        # root = self.os.path.splitdrive(file_path)[0] + self.fs.path_separator
tests/fake_filesystem_shutil_test.py:        self.fs.create_file(file_path, st_size=400)
tests/fake_filesystem_shutil_test.py:        mount_point = 'M:' if self.is_windows_fs else '/mount'
tests/fake_filesystem_shutil_test.py:        self.fs.add_mount_point(mount_point, total_size=500)
tests/fake_filesystem_shutil_test.py:    def use_real_fs(self):
tests/fake_filesystem_shutil_test.py:    def use_real_fs(self):
tests/performance_test.py:"""Shall provide tests to check performance overhead of pyfakefs."""
tests/performance_test.py:from pyfakefs.fake_filesystem_unittest import TestCase
tests/performance_test.py:from pyfakefs.helpers import IS_PYPY
tests/performance_test.py:            self.setUpPyfakefs()
tests/performance_test.py:            self.setUpPyfakefs(use_cache=False)
fake_scandir.py:from pyfakefs.extra_packages import use_scandir_package
fake_scandir.py:from pyfakefs.helpers import to_string
fake_scandir.py:                if self._filesystem.is_windows_fs:
fake_scandir.py:            if self._filesystem.is_windows_fs:
fake_scandir.py:        def __fspath__(self):
fake_scandir.py:                    self.filesystem.is_windows_fs):
tests/all_tests_without_extra_packages.py:"""A test suite that runs all tests for pyfakefs at once.
tests/all_tests_without_extra_packages.py:from pyfakefs import extra_packages
tests/all_tests_without_extra_packages.py:from pyfakefs.tests.all_tests import AllTests  # noqa: E402
tests/fake_filesystem_unittest_test.py:Test the :py:class`pyfakefs.fake_filesystem_unittest.TestCase` base class.
tests/fake_filesystem_unittest_test.py:import pyfakefs.tests.import_as_example
tests/fake_filesystem_unittest_test.py:import pyfakefs.tests.logsio
tests/fake_filesystem_unittest_test.py:from pyfakefs import fake_filesystem_unittest, fake_filesystem
tests/fake_filesystem_unittest_test.py:from pyfakefs.extra_packages import pathlib
tests/fake_filesystem_unittest_test.py:from pyfakefs.fake_filesystem import OSType
tests/fake_filesystem_unittest_test.py:from pyfakefs.fake_filesystem_unittest import (
tests/fake_filesystem_unittest_test.py:    Patcher, Pause, patchfs, PatchMode
tests/fake_filesystem_unittest_test.py:from pyfakefs.tests.fixtures import module_with_attributes
tests/fake_filesystem_unittest_test.py:            patcher.fs.create_file('/foo/bar', contents='test')
tests/fake_filesystem_unittest_test.py:    @patchfs
tests/fake_filesystem_unittest_test.py:    def test_context_decorator(self, fake_fs):
tests/fake_filesystem_unittest_test.py:        fake_fs.create_file('/foo/bar', contents='test')
tests/fake_filesystem_unittest_test.py:class TestPatchfsArgumentOrder(TestCase):
tests/fake_filesystem_unittest_test.py:    @patchfs
tests/fake_filesystem_unittest_test.py:    def test_argument_order1(self, fake_fs, patched_system):
tests/fake_filesystem_unittest_test.py:        fake_fs.create_file('/foo/bar', contents='test')
tests/fake_filesystem_unittest_test.py:    @patchfs
tests/fake_filesystem_unittest_test.py:    def test_argument_order2(self, patched_system, fake_fs):
tests/fake_filesystem_unittest_test.py:        fake_fs.create_file('/foo/bar', contents='test')
tests/fake_filesystem_unittest_test.py:class TestPyfakefsUnittestBase(fake_filesystem_unittest.TestCase):
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:class TestPyfakefsUnittest(TestPyfakefsUnittestBase):  # pylint: disable=R0904
tests/fake_filesystem_unittest_test.py:    """Test the `pyfakefs.fake_filesystem_unittest.TestCase` base class."""
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists('/fake_file.txt'))
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists('/fake_file.txt'))
tests/fake_filesystem_unittest_test.py:        self.assertFalse(self.fs.exists('/test/dir1/dir2'))
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists('/test/dir1/dir2'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir('/test/dir1/dir2a')
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir('/test/dir1/dir2b')
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir('/test/dir1/dir2a')
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir('/test/dir1/dir2b')
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists('/test/dir1/dir2b'))
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists('/test/dir1/dir2a'))
tests/fake_filesystem_unittest_test.py:        self.assertFalse(self.fs.exists('/test/dir1'))
tests/fake_filesystem_unittest_test.py:            self.assertTrue(self.fs.exists(r'\fake_file.txt'))
tests/fake_filesystem_unittest_test.py:            self.assertTrue(self.fs.exists('/fake_file.txt'))
tests/fake_filesystem_unittest_test.py:class TestPatchingImports(TestPyfakefsUnittestBase):
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path)
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(file_path))
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists1(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path)
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(file_path))
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists2(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(file_path)
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists3(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(file_path)
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists5(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(file_path)
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists6(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(file_path)
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists7(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'abc')
tests/fake_filesystem_unittest_test.py:        stat_result = pyfakefs.tests.import_as_example.file_stat1(file_path)
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'abc')
tests/fake_filesystem_unittest_test.py:        stat_result = pyfakefs.tests.import_as_example.file_stat2(file_path)
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'abc')
tests/fake_filesystem_unittest_test.py:        contents = pyfakefs.tests.import_as_example.file_contents1(file_path)
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'abc')
tests/fake_filesystem_unittest_test.py:        contents = pyfakefs.tests.import_as_example.file_contents2(file_path)
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(patch_default_args=True)
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(file_path)
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists4(file_path))
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(file_path)
tests/fake_filesystem_unittest_test.py:        sut = pyfakefs.tests.import_as_example.TestDefaultArg()
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists4('foo'))
tests/fake_filesystem_unittest_test.py:class TestAttributesWithFakeModuleNames(TestPyfakefsUnittestBase):
tests/fake_filesystem_unittest_test.py:class TestPathNotPatchedIfNotOsPath(TestPyfakefsUnittestBase):
tests/fake_filesystem_unittest_test.py:class FailedPatchingTest(TestPyfakefsUnittestBase):
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'test')
tests/fake_filesystem_unittest_test.py:            4, pyfakefs.tests.import_as_example.system_stat(file_path).st_size)
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(
tests/fake_filesystem_unittest_test.py:            modules_to_reload=[pyfakefs.tests.import_as_example])
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.exists_this_file())
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists1('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists2('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists3('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists5('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists6('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists7('foo'))
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.open_this_file()
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'abc')
tests/fake_filesystem_unittest_test.py:        contents = pyfakefs.tests.logsio.file_contents(file_path)
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(
tests/fake_filesystem_unittest_test.py:            additional_skip_names=['pyfakefs.tests.import_as_example'])
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.exists_this_file())
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists1('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists2('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists3('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists4('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists5('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists6('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists7('foo'))
tests/fake_filesystem_unittest_test.py:        pyfakefs.tests.import_as_example.open_this_file()
tests/fake_filesystem_unittest_test.py:        pyfakefs.tests.import_as_example.return_this_file_path()
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(
tests/fake_filesystem_unittest_test.py:            additional_skip_names=[pyfakefs.tests.import_as_example])
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.exists_this_file())
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists1('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists2('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists3('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists4('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists5('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists6('foo'))
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo')
tests/fake_filesystem_unittest_test.py:            pyfakefs.tests.import_as_example.check_if_exists7('foo'))
tests/fake_filesystem_unittest_test.py:        pyfakefs.tests.import_as_example.open_this_file()
tests/fake_filesystem_unittest_test.py:        pyfakefs.tests.import_as_example.return_this_file_path()
tests/fake_filesystem_unittest_test.py:    _orig_module = pyfakefs.tests.import_as_example
tests/fake_filesystem_unittest_test.py:    def __init__(self, fs):
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(
tests/fake_filesystem_unittest_test.py:                'pyfakefs.tests.import_as_example': FakeExampleModule})
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path, contents=b'test')
tests/fake_filesystem_unittest_test.py:            4, pyfakefs.tests.import_as_example.system_stat(file_path).st_size)
tests/fake_filesystem_unittest_test.py:    patched automatically - use patchfs decorator with parameter.
tests/fake_filesystem_unittest_test.py:    @patchfs
tests/fake_filesystem_unittest_test.py:    def test_system_stat_failing(self, fake_fs):
tests/fake_filesystem_unittest_test.py:        fake_fs.create_file(file_path, contents=b'test')
tests/fake_filesystem_unittest_test.py:            4, pyfakefs.tests.import_as_example.system_stat(file_path).st_size)
tests/fake_filesystem_unittest_test.py:    @patchfs(modules_to_patch={
tests/fake_filesystem_unittest_test.py:        'pyfakefs.tests.import_as_example': FakeExampleModule})
tests/fake_filesystem_unittest_test.py:    def test_system_stat(self, fake_fs):
tests/fake_filesystem_unittest_test.py:        fake_fs.create_file(file_path, contents=b'test')
tests/fake_filesystem_unittest_test.py:            4, pyfakefs.tests.import_as_example.system_stat(file_path).st_size)
tests/fake_filesystem_unittest_test.py:    """Test allow_root_user argument to setUpPyfakefs."""
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(allow_root_user=False)
tests/fake_filesystem_unittest_test.py:        """Check that fs behaves as non-root user regardless of actual
tests/fake_filesystem_unittest_test.py:        self.fs.is_windows_fs = False
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir(dir_path, perm_bits=0o555)
tests/fake_filesystem_unittest_test.py:            self.fs.create_file(file_path)
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(file_path)
tests/fake_filesystem_unittest_test.py:class PauseResumeTest(TestPyfakefsUnittestBase):
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:        self.assertFalse(self.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:    def test_pause_resume_fs(self):
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:        self.fs.resume()
tests/fake_filesystem_unittest_test.py:        self.fs.pause()
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:        self.assertFalse(self.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:        self.fs.pause()
tests/fake_filesystem_unittest_test.py:        self.assertFalse(self.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:        self.fs.resume()
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:            self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:            self.assertFalse(self.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:    def test_pause_resume_fs_contextmanager(self):
tests/fake_filesystem_unittest_test.py:        self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:        with Pause(self.fs):
tests/fake_filesystem_unittest_test.py:            self.assertTrue(self.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:            self.assertFalse(self.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:        fs = fake_filesystem.FakeFilesystem()
tests/fake_filesystem_unittest_test.py:            fs.resume()
tests/fake_filesystem_unittest_test.py:            self.assertTrue(p.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:            self.assertTrue(p.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:            self.assertFalse(p.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:            self.assertTrue(p.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:                self.assertTrue(p.fs.exists(fake_temp_file.name))
tests/fake_filesystem_unittest_test.py:                self.assertFalse(p.fs.exists(real_temp_file.name))
tests/fake_filesystem_unittest_test.py:class TestPyfakefsTestCase(unittest.TestCase):
tests/fake_filesystem_unittest_test.py:    def test_fakefs(self):
tests/fake_filesystem_unittest_test.py:            patcher.fs.create_file('/mytempfile', contents='abcd')
tests/fake_filesystem_unittest_test.py:class TestPyfakefsTestCaseMixin(unittest.TestCase,
tests/fake_filesystem_unittest_test.py:    def test_set_up_pyfakefs(self):
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:        self.assertTrue(hasattr(self, 'fs'))
tests/fake_filesystem_unittest_test.py:        self.assertIsInstance(self.fs, fake_filesystem.FakeFilesystem)
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:        self.fs.create_file('foo/bar')
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir("./test/subdir/")
tests/fake_filesystem_unittest_test.py:        self.fs.create_dir("./test/subdir2/")
tests/fake_filesystem_unittest_test.py:        self.fs.create_file("./test2/subdir/1.txt")
tests/fake_filesystem_unittest_test.py:    @patchfs
tests/fake_filesystem_unittest_test.py:    def test_cwd(self, fs):
tests/fake_filesystem_unittest_test.py:        from pyfakefs.tests.fixtures.deprecated_property import \
tests/fake_filesystem_unittest_test.py:            self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs(patch_open_code=PatchMode.AUTO)
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(
tests/fake_filesystem_unittest_test.py:        self.config_module = 'pyfakefs.tests.fixtures.config_module'
tests/fake_filesystem_unittest_test.py:        self.setUpPyfakefs()
tests/fake_filesystem_unittest_test.py:        self.fs.is_windows_fs = os.name != 'nt'
tests/fake_filesystem_unittest_test.py:        self.fs.add_real_file(__file__)
tests/fake_filesystem_unittest_test.py:            # fspath support since Python 3.6
tests/fake_filesystem_unittest_test.py:        self.fs.os = OSType.WINDOWS
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(path)
tests/fake_filesystem_unittest_test.py:        self.fs.os = OSType.LINUX
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(path)
tests/fake_filesystem_unittest_test.py:        self.fs.os = OSType.MACOS
tests/fake_filesystem_unittest_test.py:        self.fs.create_file(path)
tests/fake_filesystem_unittest_test.py:        self.fs.os = OSType.LINUX
tests/fake_filesystem_vs_real_test.py:from pyfakefs import fake_filesystem
tests/fake_filesystem_vs_real_test.py:from pyfakefs.helpers import IS_PYPY
tests/fake_filesystem_vs_real_test.py:    _FAKE_FS_BASE = sep('/fakefs')
tests/fake_filesystem_vs_real_test.py:        """Create a dir, file, or link in both the real fs and the fake."""
tests/fake_filesystem_vs_real_test.py:        tsname = 'fakefs.%s' % time.time()
tests/fake_filesystem_test.py:from pyfakefs import fake_filesystem
tests/fake_filesystem_test.py:from pyfakefs.fake_filesystem import set_uid, set_gid, is_root, reset_ids
tests/fake_filesystem_test.py:from pyfakefs.helpers import IS_WIN
tests/fake_filesystem_test.py:from pyfakefs.tests.test_utils import DummyTime, TestCase, RealFsTestCase
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:    def test_pickle_fs(self):
tests/fake_filesystem_test.py:        fs = pickle.loads(p)
tests/fake_filesystem_test.py:        self.assertEqual(str(fs.root), str(self.filesystem.root))
tests/fake_filesystem_test.py:        self.assertEqual(fs.mount_points, self.filesystem.mount_points)
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = is_windows
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = is_windows
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = False  # not an UNC path
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:            self.assertTrue(filesystem.is_windows_fs)
tests/fake_filesystem_test.py:            self.assertFalse(filesystem.is_windows_fs)
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.filesystem.is_windows_fs = True
tests/fake_filesystem_test.py:        self.pyfakefs_path = os.path.split(
tests/fake_filesystem_test.py:        self.root_path = os.path.split(self.pyfakefs_path)[0]
tests/fake_filesystem_test.py:        self.filesystem.add_real_directory(self.pyfakefs_path)
tests/fake_filesystem_test.py:        self.assertTrue(self.filesystem.exists(self.pyfakefs_path))
tests/fake_filesystem_test.py:            os.path.join(self.pyfakefs_path, 'fake_filesystem.py')))
tests/fake_filesystem_test.py:            os.path.join(self.pyfakefs_path, 'fake_pathlib.py')))
tests/fake_filesystem_test.py:        file_path = os.path.join(self.pyfakefs_path,
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', '__init__.py')))
tests/fake_filesystem_test.py:        real_directory = os.path.join(self.root_path, 'pyfakefs', 'tests')
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                self.root_path, 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:        self.skip_if_symlink_not_supported(force_real_fs=True)
tests/fake_filesystem_test.py:        real_directory = os.path.join(self.root_path, 'pyfakefs', 'tests')
tests/fake_filesystem_test.py:        self.skip_if_symlink_not_supported(force_real_fs=True)
tests/fake_filesystem_test.py:        real_directory = os.path.join(self.root_path, 'pyfakefs', 'tests')
tests/fake_filesystem_test.py:                os.path.join(self.pyfakefs_path, 'tests',
tests/fake_filesystem_test.py:                os.path.join('foo', 'bar', 'pyfakefs', 'tests',
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs',
tests/fake_filesystem_test.py:                os.path.join('foo', 'bar', 'pyfakefs', '__init__.py')))
tests/fake_filesystem_test.py:            os.path.join(self.root_path, 'pyfakefs', 'fake_filesystem.py')))
tests/fake_filesystem_test.py:                os.path.join(self.root_path, 'pyfakefs', '__init__.py')))
tests/fake_filesystem_test.py:        real_dir_path = os.path.join(self.root_path, 'pyfakefs')
tests/fake_filesystem_test.py:        self.filesystem.set_disk_usage(disk_size, self.pyfakefs_path)
tests/fake_filesystem_test.py:        self.filesystem.add_real_directory(self.pyfakefs_path, lazy_read=False)
tests/fake_filesystem_test.py:            self.pyfakefs_path).free)
tests/fake_filesystem_test.py:        self.filesystem.add_real_directory(self.pyfakefs_path, read_only=False)
tests/fake_filesystem_test.py:        self.assertTrue(self.filesystem.exists(self.pyfakefs_path))
tests/fake_filesystem_test.py:            os.path.join(self.pyfakefs_path, 'fake_filesystem.py')))
tests/fake_filesystem_test.py:            os.path.join(self.pyfakefs_path, 'fake_pathlib.py')))
tests/fake_filesystem_test.py:        file_path = os.path.join(self.pyfakefs_path, 'pytest_plugin.py')
tests/fake_filesystem_test.py:        fixture_path = os.path.join(self.pyfakefs_path, 'tests', 'fixtures')
tests/fake_filesystem_test.py:        fixture_path = os.path.join(self.pyfakefs_path, 'tests', 'fixtures')
tests/dynamic_patch_test.py:Tests for patching modules loaded after `setUpPyfakefs()`.
tests/dynamic_patch_test.py:from pyfakefs import fake_filesystem_unittest
tests/dynamic_patch_test.py:from pyfakefs.extra_packages import pathlib
tests/dynamic_patch_test.py:class TestPyfakefsUnittestBase(fake_filesystem_unittest.TestCase):
tests/dynamic_patch_test.py:        self.setUpPyfakefs()
tests/dynamic_patch_test.py:class DynamicImportPatchTest(TestPyfakefsUnittestBase):
tests/dynamic_patch_test.py:        self.assertTrue(self.fs.exists('test'))
tests/dynamic_patch_test.py:        self.assertTrue(self.fs.exists('test'))
tests/dynamic_patch_test.py:        self.assertTrue(self.fs.exists('test'))
tests/dynamic_patch_test.py:        self.fs.set_disk_usage(100)
tests/dynamic_patch_test.py:        self.assertTrue(self.fs.exists(file_path))
tests/dynamic_patch_test.py:        file_object = self.fs.get_object(file_path)
tests/mox3_stubout_test.py:from pyfakefs import mox3_stubout
tests/mox3_stubout_test.py:from pyfakefs.tests import mox3_stubout_example
tests/fake_stat_time_test.py:from pyfakefs.tests.test_utils import RealFsTestCase
tests/fake_stat_time_test.py:        if self.is_windows_fs:
tests/fake_stat_time_test.py:        if self.is_windows_fs:
tests/fake_stat_time_test.py:    def use_real_fs(self):
tests/fake_stat_time_test.py:    def use_real_fs(self):
tests/fake_stat_time_test.py:    def use_real_fs(self):
tests/fake_stat_time_test.py:    def use_real_fs(self):
tests/fake_stat_time_test.py:    def use_real_fs(self):
tests/fake_stat_time_test.py:    def use_real_fs(self):
tests/test_utils.py:from pyfakefs import fake_filesystem
tests/test_utils.py:from pyfakefs.helpers import is_byte_string, to_string
tests/test_utils.py:    `use_real_fs()` to return `True`.
tests/test_utils.py:            self.skip_real_fs()
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:    def is_windows_fs(self):
tests/test_utils.py:    def set_windows_fs(self, value):
tests/test_utils.py:            self.filesystem.is_windows_fs = value
tests/test_utils.py:    def use_real_fs(self):
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:            self.set_windows_fs(True)
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:            self.set_windows_fs(False)
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:            self.set_windows_fs(False)
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:    def check_case_insensitive_fs(self):
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:    def check_case_sensitive_fs(self):
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:            self.set_windows_fs(False)
tests/test_utils.py:    def skip_real_fs(self):
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:    def skip_real_fs_failure(self, skip_windows=True, skip_posix=True,
tests/test_utils.py:            if (self.use_real_fs() and
tests/test_utils.py:    def symlink_can_be_tested(self, force_real_fs=False):
tests/test_utils.py:                (not force_real_fs and not self.use_real_fs())):
tests/test_utils.py:            if force_real_fs:
tests/test_utils.py:            if force_real_fs:
tests/test_utils.py:    def skip_if_symlink_not_supported(self, force_real_fs=False):
tests/test_utils.py:        if not self.symlink_can_be_tested(force_real_fs):
tests/test_utils.py:            if self.is_windows_fs:
tests/test_utils.py:            if os.name == 'nt' and self.use_real_fs():
tests/test_utils.py:        if not self.use_real_fs():
tests/test_utils.py:    def is_windows_fs(self):
tests/test_utils.py:        if self.use_real_fs():
tests/test_utils.py:        return self.filesystem.is_windows_fs
tests/test_utils.py:        if self.use_real_fs():
tests/all_tests.py:"""A test suite that runs all tests for pyfakefs at once.
tests/all_tests.py:from pyfakefs.tests import (
tests/all_tests.py:    """A test suite that runs all tests for pyfakefs at once."""
tests/fake_tempfile_test.py:from pyfakefs import fake_filesystem_unittest
tests/fake_tempfile_test.py:        self.setUpPyfakefs()
tests/fake_tempfile_test.py:        self.assertTrue(self.fs.get_object(obj.name))
tests/fake_tempfile_test.py:            self.fs.get_object(obj.name)
tests/fake_tempfile_test.py:        file_obj = self.fs.get_object(obj.name)
tests/fake_tempfile_test.py:        file_obj = self.fs.get_object(obj.name)
tests/fake_tempfile_test.py:        next_fd = len(self.fs.open_files)
tests/fake_tempfile_test.py:        self.assertTrue(self.fs.exists(temporary[1]))
tests/fake_tempfile_test.py:        mode = 0o666 if self.fs.is_windows_fs else 0o600
tests/fake_tempfile_test.py:        self.assertEqual(self.fs.get_object(temporary[1]).st_mode,
tests/fake_tempfile_test.py:        self.fs.create_dir('/dir')
tests/fake_tempfile_test.py:        next_fd = len(self.fs.open_files)
tests/fake_tempfile_test.py:        self.assertTrue(self.fs.exists(temporary[1]))
tests/fake_tempfile_test.py:        mode = 0o666 if self.fs.is_windows_fs else 0o600
tests/fake_tempfile_test.py:        self.assertEqual(self.fs.get_object(temporary[1]).st_mode,
tests/fake_tempfile_test.py:        self.assertTrue(self.fs.exists(dirname))
tests/fake_tempfile_test.py:        self.assertEqual(self.fs.get_object(dirname).st_mode,
tests/fake_tempfile_test.py:            self.assertTrue(self.fs.exists(tmpdir))
tests/fake_tempfile_test.py:            self.assertEqual(self.fs.get_object(tmpdir).st_mode,
tests/fake_pathlib_test.py:from pyfakefs.extra_packages import pathlib, pathlib2
tests/fake_pathlib_test.py:from pyfakefs.fake_filesystem import is_root
tests/fake_pathlib_test.py:from pyfakefs import fake_pathlib, fake_filesystem
tests/fake_pathlib_test.py:from pyfakefs.tests.test_utils import RealFsTestCase
tests/fake_pathlib_test.py:        if not self.use_real_fs():
tests/fake_pathlib_test.py:            # in fake fs, we allow to use the other OS implementation
tests/fake_pathlib_test.py:            if self.use_real_fs():
tests/fake_pathlib_test.py:            if self.use_real_fs():
tests/fake_pathlib_test.py:    def use_real_fs(self):
tests/fake_pathlib_test.py:    def use_real_fs(self):
tests/fake_pathlib_test.py:    def use_real_fs(self):
tests/fake_pathlib_test.py:    def use_real_fs(self):
tests/fake_pathlib_test.py:    def use_real_fs(self):
tests/fake_pathlib_test.py:        self.skip_real_fs()
tests/fake_pathlib_test.py:        self.skip_real_fs()
tests/fake_pathlib_test.py:        self.skip_real_fs()
tests/fake_pathlib_test.py:    def use_real_fs(self):
tests/mox3_stubout_example.py::py:class`pyfakefs.mox_stubout.StubOutForTesting`.
tests/example_test.py:Test the :py:class`pyfakefs.example` module to demonstrate the usage of the
tests/example_test.py::py:class`pyfakefs.fake_filesystem_unittest.TestCase` base class.
tests/example_test.py:from pyfakefs import fake_filesystem_unittest
tests/example_test.py:from pyfakefs.extra_packages import use_scandir_package
tests/example_test.py:from pyfakefs.tests import example  # The module under test
tests/example_test.py:    """Load the pyfakefs/example.py doctest tests into unittest."""
tests/example_test.py:        """Invoke the :py:class:`pyfakefs.fake_filesystem_unittest.TestCase`
tests/example_test.py:        * Attribute `self.fs`, an instance of
tests/example_test.py:          :py:class:`pyfakefs.fake_filesystem.FakeFilesystem`. This is useful
tests/example_test.py:          :py:class:`pyfakefs.mox3_stubout.StubOutForTesting`. Use this if
tests/example_test.py:        # This is before setUpPyfakefs(), so still using the real file system
tests/example_test.py:        self.setUpPyfakefs()
tests/example_test.py:        # No longer need self.tearDownPyfakefs()
tests/example_test.py:        self.fs.create_file('/test/full.txt',
tests/example_test.py:        self.fs.create_file('/test/empty.txt')
tests/example_test.py:        self.fs.create_dir('/test/dir1/dir2a')
tests/example_test.py:        self.fs.create_dir('/test/dir1/dir2a')
tests/example_test.py:        self.fs.create_file('/test/text.txt')
tests/example_test.py:        self.fs.create_dir('/test/dir')
tests/example_test.py:        self.fs.create_file('/linktest/linked')
tests/example_test.py:        self.fs.create_symlink('/test/linked_file', '/linktest/linked')
tests/example_test.py:        self.fs.create_file('/test/text.txt')
tests/example_test.py:        self.fs.create_dir('/test/dir')
tests/example_test.py:        self.fs.add_real_file(self.filepath)
tests/fixtures/module_with_attributes.py:"""This module is for testing pyfakefs
tests/fake_os_test.py:from pyfakefs.helpers import IN_DOCKER
tests/fake_os_test.py:from pyfakefs import fake_filesystem
tests/fake_os_test.py:from pyfakefs.fake_filesystem import FakeFileOpen, is_root
tests/fake_os_test.py:from pyfakefs.extra_packages import (
tests/fake_os_test.py:from pyfakefs.tests.test_utils import DummyTime, TestCase, RealFsTestCase
tests/fake_os_test.py:        # skipping real fs test - can't test root dir
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        # skipping real fs test - can't test root dir
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:            self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:    def test_fstat(self):
tests/fake_os_test.py:            self.assertTrue(stat.S_IFREG & self.os.fstat(fileno)[stat.ST_MODE])
tests/fake_os_test.py:            self.assertTrue(stat.S_IFREG & self.os.fstat(fileno).st_mode)
tests/fake_os_test.py:            self.assertEqual(5, self.os.fstat(fileno)[stat.ST_SIZE])
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:            self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.check_case_insensitive_fs()
tests/fake_os_test.py:            if not self.use_real_fs():
tests/fake_os_test.py:        self.skip_real_fs_failure(skip_posix=False)
tests/fake_os_test.py:        # raises errno.ENOTEMPTY under Ubuntu 16.04, MacOS and pyfakefs
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:    # test fsync and fdatasync
tests/fake_os_test.py:    def test_fsync_raises_on_non_int(self):
tests/fake_os_test.py:            self.os.fsync("zero")
tests/fake_os_test.py:    def test_fsync_raises_on_invalid_fd(self):
tests/fake_os_test.py:        self.assert_raises_os_error(errno.EBADF, self.os.fsync, 500)
tests/fake_os_test.py:    def test_fsync_pass_posix(self):
tests/fake_os_test.py:            self.os.fsync(test_fd)
tests/fake_os_test.py:                                        self.os.fsync, test_fd + 10)
tests/fake_os_test.py:    def test_fsync_pass_windows(self):
tests/fake_os_test.py:            self.os.fsync(test_fd)
tests/fake_os_test.py:                                        self.os.fsync, test_fd + 10)
tests/fake_os_test.py:            self.assert_raises_os_error(errno.EBADF, self.os.fsync, test_fd)
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        if self.use_real_fs() and 'chmod' not in os.supports_follow_symlinks:
tests/fake_os_test.py:        if self.use_real_fs() and 'chmod' not in os.supports_follow_symlinks:
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:            self.skip_real_fs()
tests/fake_os_test.py:            self.skip_real_fs()
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:        self.check_case_insensitive_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:            if not self.use_real_fs():
tests/fake_os_test.py:        self.skip_real_fs_failure(skip_posix=False)
tests/fake_os_test.py:    # test fsync and fdatasync
tests/fake_os_test.py:    def test_fsync_pass(self):
tests/fake_os_test.py:        self.os.fsync(test_fd)
tests/fake_os_test.py:        self.assert_raises_os_error(errno.EBADF, self.os.fsync, test_fd + 10)
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.check_case_insensitive_fs()
tests/fake_os_test.py:        self.check_case_insensitive_fs()
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:            self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:        stat0 = self.os.fstat(file_des)
tests/fake_os_test.py:        stat0 = self.os.fstat(file_des)
tests/fake_os_test.py:    def test_sendfile_no_offset(self):
tests/fake_os_test.py:    def test_sendfile_with_offset(self):
tests/fake_os_test.py:    def test_sendfile_offset_none(self):
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:        # need to have a top-level link to reproduce the bug - skip real fs
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:        self.filesystem.is_windows_fs = False
tests/fake_os_test.py:                                  not self.use_real_fs())
tests/fake_os_test.py:            if self.use_real_fs():
tests/fake_os_test.py:                import pyfakefs.fake_scandir
tests/fake_os_test.py:                    return pyfakefs.fake_scandir.scandir(self.filesystem, p)
tests/fake_os_test.py:        if use_scandir and self.use_real_fs():
tests/fake_os_test.py:                if self.is_windows_fs:
tests/fake_os_test.py:                         os.fspath(self.dir_entries[0]))
tests/fake_os_test.py:                         os.fspath(self.dir_entries[1]))
tests/fake_os_test.py:        # behaves differently in different systems, so we skip the real fs test
tests/fake_os_test.py:        self.skip_real_fs()
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_os_test.py:        if self.use_real_fs():
tests/fake_os_test.py:    def use_real_fs(self):
tests/fake_open_test.py:from pyfakefs import fake_filesystem
tests/fake_open_test.py:from pyfakefs.fake_filesystem import is_root, PERM_READ, FakeIoModule
tests/fake_open_test.py:from pyfakefs.fake_filesystem_unittest import PatchMode
tests/fake_open_test.py:from pyfakefs.tests.test_utils import RealFsTestCase
tests/fake_open_test.py:        if self.use_real_fs():
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:        if self.use_real_fs():
tests/fake_open_test.py:        if not self.use_real_fs():
tests/fake_open_test.py:    def test_open_code_in_real_fs(self):
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:        if self.use_real_fs():
tests/fake_open_test.py:    def test_open_code_in_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:        self.skip_real_fs()  # cannot set fs size in real fs
tests/fake_open_test.py:        self.skip_real_fs()  # cannot set fs size in real fs
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:    def use_real_fs(self):
tests/fake_open_test.py:            self.skip_real_fs()
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:        self.skip_real_fs()
tests/fake_open_test.py:    def use_real_fs(self):
